
// Shortest path in a directed acyclic graph





#include<bits/stdc++.h>
using namespace std;

class Graph{
  public:
    unordered_map<int,list<pair<int,int>>>adj;
    
    // create the edge and vertex and weighted graph
  void addEdge(int u,int v,int weight){
      pair<int,int>p=make_pair(v,weight);
   adj[u].push_back(p);
  }
  // print the adjaceny list
  void print(){
      for(auto i:adj){
          cout<<i.first<<"->";
          for(auto j:i.second){
              cout<<"["<<j.first<<","<<j.second<<"],";
          }
          cout<<endl;
      }
  }
  // Topological sort 
  void dfs(bool visited[],int node,stack<int>&st){
      visited[node]=true;
      for(auto x:adj[node]){
          if(visited[x.first]==false){
              dfs(visited,x.first,st);
          }
      }
      st.push(node);
  }
  
  //  DAG
  void shortest(stack<int>&st,vector<int>&dist,int src){
      dist[src]=0;
      while(st.size()!=0){
          int Top=st.top();
          st.pop();
          if(dist[Top]!=INT_MAX){
              for(auto i:adj[Top]){
                  if(dist[i.first]>(dist[Top]+i.second))
                  dist[i.first]=dist[Top]+i.second;
              }
          }
      }
  }
};

int main(){
    Graph G;
    G.addEdge(0, 1, 5);
    G.addEdge(0, 2, 3);
    G.addEdge(1, 2, 2);
    G.addEdge(1, 3, 6);
    G.addEdge(2, 3, 7);
    G.addEdge(2, 4, 4);
    G.addEdge(2, 5, 2);
    G.addEdge(3, 4,-1);
    G.addEdge(4, 5,-2);
    bool visited[6]={false};
    stack<int>st;
    for(int i=0;i<5;i++){
if(visited[i]==false){
    G.dfs(visited,i,st);
}    
    }
   
    vector<int>dist(6,INT_MAX);
   G.shortest(st,dist,1);
   for(auto x:dist){
       if(x==INT_MAX){
           cout<<"INF"<<" ";
       }else
       cout<<x<<" ";
   }
}
